// Generated by CoffeeScript 1.8.0
(function() {
  var run, serve;

  serve = function(port, keyfile) {
    var Promise, encode, fs, gzip, http, listFiles, nacl, path, readDir, readFile, serveFile, server, url;
    if (port == null) {
      port = 2718;
    }
    http = require('http');
    url = require('url');
    path = require('path');
    nacl = require('js-nacl').instantiate();
    fs = require('fs');
    Promise = require('bluebird');
    readDir = Promise.promisify(fs.readdir);
    readFile = Promise.promisify(fs.readFile);
    gzip = Promise.promisify(require('zlib').gzip);
    encode = function(message) {
      var nonce, packet;
      nonce = nacl.crypto_box_random_nonce();
      packet = nacl.crypto_box(message, nonce, nacl.from_hex(keyfile.clientPublicKey), nacl.from_hex(keyfile.serverPrivateKey));
      return {
        nonce: nacl.to_hex(nonce),
        packet: nacl.to_hex(packet)
      };
    };
    serveFile = function(res, filename) {
      return readFile(filename).then(function(contents) {
        var encoded, stringified;
        encoded = encode(contents);
        stringified = JSON.stringify(encoded);
        return gzip(new Buffer(stringified));
      }).then(function(compressed) {
        res.writeHead(200, {
          'Content-Type': 'application/json',
          'Content-Encoding': 'gzip'
        });
        res.write(compressed);
        return res.end();
      });
    };
    listFiles = function(res, directory) {
      return readDir(directory).then(function(files) {
        files = files.filter(function(filename) {
          return fs.statSync(filename).isFile();
        });
        res.writeHead(200, {
          'Content-Type': 'text/plain'
        });
        res.write(files.join('\n') + '\n');
        return res.end();
      });
    };
    server = http.createServer(function(req, res) {
      var filename, uri;
      uri = url.parse(req.url).pathname;
      filename = path.join(process.cwd(), uri);
      return new Promise(function(resolve) {
        return fs.exists(filename, resolve);
      }).then(function(exists) {
        if (!exists) {
          throw new Error(404);
        }
      }).then(function() {
        if (fs.statSync(filename).isDirectory()) {
          return listFiles(res, filename);
        } else {
          return serveFile(res, filename);
        }
      })["catch"](function(err) {
        var _ref;
        console.error((_ref = err != null ? err.stack : void 0) != null ? _ref : err);
        res.writeHead(500, {
          'Content-Type': 'text/plain'
        });
        return res.end();
      });
    });
    return new Promise(function(resolve) {
      return server.listen(port, resolve);
    });
  };

  run = function() {
    var commander;
    commander = require('commander');
    commander.version(require('../package.json').version).description('Securely serve files from the current directory over HTTP.').usage('-p [port] -k [server-keys.json]').option('-p, --port [port]', 'HTTP server port').option('-k, --keys [keyfile]', 'Server keyfile. Generate with salty-keygen.').parse(process.argv);
    if (commander.port == null) {
      commander.help();
    }
    if (commander.keys == null) {
      commander.help();
    }
    if (!require('fs').existsSync(commander.keys)) {
      console.error("Could not find keys file " + commander.keys);
      process.exit(1);
    }
    return require('./read-stream')(require('fs').createReadStream(commander.keys)).then(JSON.parse).then(function(keyfile) {
      return serve(commander.port, keyfile);
    }).then(function() {
      return console.log("Running salty server on " + commander.port);
    })["catch"](function(err) {
      var _ref;
      console.error((_ref = err != null ? err.stack : void 0) != null ? _ref : err);
      return process.exit(1);
    });
  };

  if (require.main === module) {
    run();
  } else {
    return module.exports = {
      run: run
    };
  }

}).call(this);
