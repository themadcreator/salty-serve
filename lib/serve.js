// Generated by CoffeeScript 1.8.0
(function() {
  var fs, run, serve;

  fs = require('fs');

  serve = function(port, keyfile, servePath) {
    var Promise, encode, gzip, http, listFiles, nacl, path, readDir, readFile, resolvePath, serveFile, server, url;
    http = require('http');
    url = require('url');
    path = require('path');
    nacl = require('js-nacl').instantiate();
    Promise = require('bluebird');
    readDir = Promise.promisify(fs.readdir);
    readFile = Promise.promisify(fs.readFile);
    resolvePath = Promise.promisify(fs.realpath);
    gzip = Promise.promisify(require('zlib').gzip);
    encode = function(message) {
      var encrypted, nonce, packet;
      nonce = nacl.crypto_box_random_nonce();
      packet = nacl.crypto_box(message, nonce, nacl.from_hex(keyfile.clientPublicKey), nacl.from_hex(keyfile.serverPrivateKey));
      encrypted = {
        nonce: nacl.to_hex(nonce),
        packet: nacl.to_hex(packet)
      };
      return gzip(new Buffer(JSON.stringify(encrypted)));
    };
    serveFile = function(res, filename) {
      return readFile(filename).then(encode).then(function(encoded) {
        res.writeHead(200, {
          'Content-Type': 'application/json',
          'Content-Disposition': 'Attachment',
          'Content-Encoding': 'gzip'
        });
        res.write(encoded);
        return res.end();
      });
    };
    listFiles = function(res, directory) {
      return readDir(directory).then(function(files) {
        files = files.filter(function(filename) {
          return fs.statSync(path.join(directory, filename)).isFile();
        });
        return files.join('\n') + '\n';
      }).then(function(content) {
        res.writeHead(200, {
          'Content-Type': 'text/plain'
        });
        res.write(content);
        return res.end();
      });
    };
    server = http.createServer(function(req, res) {
      var uri;
      uri = url.parse(req.url).pathname;
      return resolvePath(path.join(process.cwd(), servePath, uri)).then(function(filename) {
        if (!fs.existsSync(filename)) {
          console.error("404: " + filename);
          res.writeHead(404, {
            'Content-Type': 'text/plain'
          });
          res.end();
        } else if (fs.statSync(filename).isDirectory()) {
          return listFiles(res, filename);
        } else {
          return serveFile(res, filename);
        }
      })["catch"](function(err) {
        var _ref;
        console.error((_ref = err != null ? err.stack : void 0) != null ? _ref : err);
        res.writeHead(500, {
          'Content-Type': 'text/plain'
        });
        return res.end();
      });
    });
    return new Promise(function(resolve) {
      return server.listen(port, resolve);
    });
  };

  run = function() {
    var commander, servePath;
    commander = require('commander');
    commander.version(require('../package.json').version).description('Securely serve files from the current directory over HTTP.').usage('-p [port] -k [server-keys.json] [path to serve]').option('-p, --port [port]', 'HTTP server port', parseInt).option('-k, --keys [keyfile]', 'Server keyfile. Generate with salty-keygen.').parse(process.argv);
    servePath = commander.args[0];
    if (commander.port == null) {
      commander.help();
    }
    if (commander.keys == null) {
      commander.help();
    }
    if (servePath == null) {
      commander.help();
    }
    if (!fs.existsSync(commander.keys)) {
      console.error("\nERROR: Could not find keys file '" + commander.keys + "'");
      commander.help();
    }
    if (!(fs.existsSync(servePath) && fs.statSync(servePath).isDirectory())) {
      console.error("\nERROR: Invalid serve path '" + servePath + "'");
      commander.help();
    }
    return require('./read-stream')(fs.createReadStream(commander.keys)).then(JSON.parse).then(function(keyfile) {
      return serve(commander.port, keyfile, servePath);
    }).then(function() {
      return console.log("Running salty server on " + commander.port);
    })["catch"](function(err) {
      var _ref;
      console.error((_ref = err != null ? err.stack : void 0) != null ? _ref : err);
      return process.exit(1);
    });
  };

  if (require.main === module) {
    run();
  } else {
    return module.exports = {
      run: run
    };
  }

}).call(this);
