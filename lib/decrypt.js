// Generated by CoffeeScript 1.8.0
(function() {
  var decode, run;

  decode = function(stream, clientKeyfile) {
    var Promise, fs, nacl, readStream;
    if (clientKeyfile == null) {
      clientKeyfile = '../client-keys.json';
    }
    fs = require('fs');
    Promise = require('bluebird');
    nacl = require('js-nacl').instantiate();
    readStream = require('./read-stream');
    return Promise.all([readStream(stream).then(JSON.parse), readStream(fs.createReadStream(clientKeyfile)).then(JSON.parse)]).spread(function(encoded, keypair) {
      var decoded;
      decoded = nacl.crypto_box_open(nacl.from_hex(encoded.packet), nacl.from_hex(encoded.nonce), nacl.from_hex(keypair.serverPublicKey), nacl.from_hex(keypair.clientPrivateKey));
      return process.stdout.write(new Buffer(decoded), 'binary');
    });
  };

  run = function() {
    var commander;
    commander = require('commander');
    commander.version(require('../package.json').version).description('Decrypts nacl crypto box from stdin to stdout using client keyfile.').usage('-k [client-keys.json]').option('-k, --keys [keyfile]', 'Client keyfile. Generate with salty-keygen.').parse(process.argv);
    if (commander.keys == null) {
      commander.help();
    }
    if (!require('fs').existsSync(commander.keys)) {
      console.error("Could not find keys file " + commander.keys);
      process.exit(1);
    }
    return decode(process.stdin, commander.keys)["catch"](function(err) {
      var _ref;
      console.error((_ref = err != null ? err.stack : void 0) != null ? _ref : err);
      return process.exit(1);
    });
  };

  if (require.main === module) {
    run();
  } else {
    return module.exports = {
      run: run
    };
  }

}).call(this);
